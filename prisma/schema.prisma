// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String          @id @default(uuid())
  name            String
  username        String          @unique
  email           String          @unique
  hashedPassword  String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  sessions        Session[]
  member_of       Application[]
  assigned_issues IssuesOnUser[]
  comments        Comment[]
  created_apps    Application[]   @relation("CreatedApp")
  created_issues  Issue[]         @relation("CreatedIssue")
  issueActivity   IssueActivity[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Application {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  logo        String?
  website     String?
  createdBy   User     @relation(name: "CreatedApp", fields: [createdById], references: [id])
  createdById String

  issues  Issue[]
  members User[]
}

model Issue {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  number      Int          @default(autoincrement())
  title       String
  description String
  status      StatusType
  priority    PriorityType
  type        String

  createdBy   User   @relation(name: "CreatedIssue", fields: [createdById], references: [id])
  createdById String

  application   Application     @relation(fields: [applicationId], references: [id])
  applicationId String
  assigned_to   IssuesOnUser[]
  comments      Comment[]
  issueActivity IssueActivity[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model IssuesOnUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   String

  // we ensure this during api saving
  @@unique([userId, issueId])
}

enum StatusType {
  OPEN
  IN_PROGRESS
  CLOSED
  BACKLOG
  TODO
  IN_REVIEW
  DONE
  CANCELLED
}

enum PriorityType {
  URGENT
  HIGH
  MEDIUM
  LOW
}

model IssueActivity {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  text      String
  type      ActivityType
  issue     Issue        @relation(fields: [issueId], references: [id])
  issueId   String
  author    User         @relation(fields: [authorId], references: [id])
  authorId  String
}

enum ActivityType {
  CREATED
  UPDATED
  CLOSED
  REOPENED
  ASSIGNED
  UNASSIGNED
  COMMENTED
  DELETED
}
